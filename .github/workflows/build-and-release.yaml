name: Build and Release

on:
  push:
    paths:
      - ".github/workflows/build-and-release.yaml"
      - "!package.json"
      - "!package-lock.json"

env:
  BROKER_HOSTNAME: iot.thingy.rocks
  MEMFAULT_PROJECT_KEY: m8U6bBczNz1N8Xi3M8kAKjAMKu9833YA

jobs:
  # This generates a string containing the current date which is used in
  # in artifact names to simplify locating and distinguishing them once they have
  # been downloaded
  date-string:
    name: Generate string containing the current date
    runs-on: ubuntu-22.04
    outputs:
      dateAsString: ${{ steps.dateAsString.outputs.dateAsString }}
    steps:
      - name: Generate date string
        id: dateAsString
        run: echo "dateAsString=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

  release-version:
    name: Determine next release version

    runs-on: ubuntu-22.04

    outputs:
      nextRelease: ${{ steps.version.outputs.nextRelease }}

    steps:
      - uses: actions/checkout@v3

      - name: Determine next release version
        uses: nordicsemiconductor/cloud-get-next-version-action@saga
        id: version
        with:
          branch: saga
          defaultVersion: "0.0.0-development-${{ github.sha }}"

      - run: echo ${{ steps.version.outputs.nextRelease }}

  build:
    runs-on: ubuntu-22.04

    needs: [release-version, date-string]

    strategy:
      matrix:
        hw: [thingy91, nrf9160dk, thingy91+solar, nrf9160dk+wifi]
        configuration: [low-power, debug]

    steps:
      - uses: actions/checkout@v3
        with:
          path: firmware
          submodules: recursive

      - name: Build for Thingy:91
        if: contains(matrix.hw, 'thingy91')
        run: echo 'board=thingy91_nrf9160_ns' >> $GITHUB_ENV

      - name: Build for 9160DK
        if: contains(matrix.hw, 'nrf9160dk')
        run: echo 'board=nrf9160dk_nrf9160_ns' >> $GITHUB_ENV

      - name: Configure Version
        working-directory: firmware
        run: |
          APP_VERSION=${{ needs.release-version.outputs.nextRelease }}-${{ env.board }}-${{ matrix.configuration }}
          echo "CONFIG_ASSET_TRACKER_V2_APP_VERSION=\"${APP_VERSION}\"" >> firmware.conf
          echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV

      - name: Configure the AWS IoT broker hostname
        working-directory: firmware
        run: |
          echo "CONFIG_AWS_IOT_BROKER_HOST_NAME=\"${{ env.BROKER_HOSTNAME }}\"" >> firmware.conf

      - name: Configure Memfault
        working-directory: firmware
        run: |
          echo "CONFIG_NRF_MODEM_LIB_TRACE_ENABLED=y" >> firmware.conf
          echo "CONFIG_DEBUG_MODULE_MEMFAULT_USE_EXTERNAL_TRANSPORT=y" >> firmware.conf
          echo "CONFIG_DEBUG_MODULE_MEMFAULT_HEARTBEAT_INTERVAL_SEC=3600" >> firmware.conf
          echo "CONFIG_MEMFAULT_NCS_FW_VERSION_STATIC=y" >> firmware.conf
          echo "CONFIG_MEMFAULT_NCS_FW_VERSION=\"${{ env.APP_VERSION }}\"" >> firmware.conf
          echo "CONFIG_MEMFAULT_NCS_FW_TYPE=\"thingy_world\"" >> firmware.conf
          echo "CONFIG_MEMFAULT_NCS_PROJECT_KEY=\"${{ env.MEMFAULT_PROJECT_KEY }}\"" >> firmware.conf

      - run: cat firmware.conf
        working-directory: firmware

      - name: enable low-power build
        if: matrix.configuration == 'low-power'
        run: echo EXTRA_OVERLAY=overlay-low-power.conf >> $GITHUB_ENV

      - name: enable debug build
        if: matrix.configuration == 'debug'
        run: echo EXTRA_OVERLAY=overlay-debug.conf >> $GITHUB_ENV

      - name: enable solar shield support
        if: contains(matrix.hw, 'solar')
        run: echo SHIELD_OVERLAY=overlay-solar.conf >> $GITHUB_ENV

      - name: enable WiFi shield support
        if: contains(matrix.hw, 'wifi')
        run: |
          echo SHIELD_OVERLAY=overlay-nrf7002ek-wifi-scan-only.conf >> $GITHUB_ENV
          echo EXTRA_ARGS="-DSHIELD=nrf7002_ek -DDTC_OVERLAY_FILE=nrf9160dk_with_nrf7002ek.overlay" >> $GITHUB_ENV

      - name: Build
        working-directory: firmware
        run: |
          docker run --rm \
            -v ${PWD}:/workdir/project \
            -w /workdir/project/sdk-nrf/applications/asset_tracker_v2 \
            nordicplayground/nrfconnect-sdk:v2.2-branch \
            west build \
              -p always \
              -b ${{ env.board }} \
              --build-dir /workdir/project/build \
              -- \
                ${{ env.EXTRA_ARGS }} \
                -DOVERLAY_CONFIG="${{ env.EXTRA_OVERLAY }};overlay-pgps.conf;overlay-aws.conf;overlay-memfault.conf;/workdir/project/thingy_world.conf;/workdir/project/firmware.conf;${{ env.SHIELD_OVERLAY }}" \
                -DEXTRA_CFLAGS="-Werror"

      - name: Upload symbols file to Memfault
        working-directory: firmware
        run: |
          pip3 install memfault-cli
          memfault \
            --org-token ${{ secrets.MEMFAULT_ORGANIZATION_TOKEN }} \
            --org ${{ secrets.MEMFAULT_ORGANIZATION_SLUG }} \
            --project ${{ secrets.MEMFAULT_PROJECT_SLUG }} \
            upload-mcu-symbols \
            --software-type thingy_world \
            --software-version ${{ env.APP_VERSION }} \
            build/zephyr/zephyr.elf

      - name: Copy firmware
        run: |
          cp firmware/build/zephyr/merged.hex ./
          cp firmware/build/zephyr/app_signed.hex ./
          cp firmware/build/zephyr/app_update.bin ./
          cp firmware/build/zephyr/zephyr.elf ./
          cp firmware/firmware.conf ./

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.board }}-${{ matrix.configuration }}-${{
            needs.date-string.outputs.dateAsString }}-${{ github.sha }}
          path: |
            merged.hex
            app_signed.hex
            app_update.bin
            firmware.conf
            zephyr.elf

  release:
    name: Release
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/saga' && (github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' || github.event_name ==
      'repository_dispatch')

    needs: [build]

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3

      - run: npx semantic-release
