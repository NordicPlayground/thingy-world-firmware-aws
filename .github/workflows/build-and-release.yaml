name: Build and Release

on:
  push:
    branches:
      - saga
    paths:
      - ".github/workflows/build-and-release.yaml"
      - "!package.json"
      - "!package-lock.json"
  workflow_dispatch:
  pull_request:

env:
  BROKER_HOSTNAME: iot.thingy.rocks
  MEMFAULT_PROJECT_KEY: m8U6bBczNz1N8Xi3M8kAKjAMKu9833YA

jobs:
  # This generates a string containing the current date which is used in
  # in artifact names to simplify locating and distinguishing them once they have
  # been downloaded
  date-string:
    name: Generate string containing the current date
    runs-on: ubuntu-22.04
    outputs:
      dateAsString: ${{ steps.dateAsString.outputs.dateAsString }}
    steps:
      - name: Generate date string
        id: dateAsString
        run: echo "dateAsString=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

  release-version:
    name: Determine next release version

    runs-on: ubuntu-22.04

    outputs:
      nextRelease: ${{ steps.version.outputs.nextRelease }}

    steps:
      - uses: actions/checkout@v3

      - name: Determine next release version
        uses: nordicsemiconductor/cloud-get-next-version-action@saga
        id: version
        with:
          branch: saga
          defaultVersion: "0.0.0-development-${{ github.sha }}"

      - run: echo ${{ steps.version.outputs.nextRelease }}

  build-asset_tracker_v2:
    runs-on: ubuntu-22.04

    needs: [release-version, date-string]

    strategy:
      matrix:
        configuration:
          - thingy91.low-power.memfault
          - nrf9160dk.low-power.memfault
          # Not enough flash for Memfault AND debug on Thingy:91,
          # and it's not that useful anyway because debug builds
          # will most likely be used connected to a PC
          - thingy91.debug
          - nrf9160dk.debug
          # Thingy:91 with solar shield using AWS backend
          - thingy91.low-power.solar.memfault
          - thingy91.debug.solar
          # When enabling WiFi, Memfault does not fit flash
          # There is no WiFi shield for the Thingy:91
          - nrf9160dk.low-power.wifi
          - nrf9160dk.debug.wifi
          # NB-IoT only builds for Thingy:91
          - thingy91.low-power.memfault.nbiot
          - thingy91.debug.nbiot
          - thingy91.low-power.memfault.nbiot.legacy_pco
          - thingy91.debug.nbiot.legacy_pco

    steps:
      - uses: actions/checkout@v3
        with:
          path: firmware
          submodules: recursive

      - name: Build for Thingy:91
        if: contains(matrix.configuration, 'thingy91')
        run: echo 'board=thingy91_nrf9160_ns' >> $GITHUB_ENV

      - name: Build for 9160DK
        if: contains(matrix.configuration, 'nrf9160dk')
        run: echo 'board=nrf9160dk_nrf9160_ns' >> $GITHUB_ENV

      - name: Configure Version
        working-directory: firmware
        run: |
          APP_VERSION=${{ needs.release-version.outputs.nextRelease }}+${{ matrix.configuration }}
          echo "CONFIG_ASSET_TRACKER_V2_APP_VERSION=\"${APP_VERSION}\"" >> firmware.conf
          echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV
          echo "CONFIG_DATA_DEVICE_MODE_ACTIVE=y" >> firmware.conf
          echo "CONFIG_LTE_PSM_REQ_RAT=\"00000000\"" >> firmware.conf

      - name: Configure the AWS IoT broker hostname
        working-directory: firmware
        run: |
          echo "CONFIG_AWS_IOT_BROKER_HOST_NAME=\"${{ env.BROKER_HOSTNAME }}\"" >> firmware.conf
          echo AWS_OVERLAY=overlay-aws.conf >> $GITHUB_ENV

      - name: Configure Memfault
        if: contains(matrix.configuration, 'memfault')
        working-directory: firmware
        run: |
          echo "CONFIG_DEBUG_MODULE_MEMFAULT_USE_EXTERNAL_TRANSPORT=y" >> firmware.conf
          echo "CONFIG_DEBUG_MODULE_MEMFAULT_HEARTBEAT_INTERVAL_SEC=3600" >> firmware.conf
          echo "CONFIG_MEMFAULT_NCS_FW_VERSION_STATIC=y" >> firmware.conf
          echo "CONFIG_MEMFAULT_NCS_FW_VERSION=\"${{ env.APP_VERSION }}\"" >> firmware.conf
          echo "CONFIG_MEMFAULT_NCS_FW_TYPE=\"thingy_world\"" >> firmware.conf
          echo "CONFIG_MEMFAULT_NCS_PROJECT_KEY=\"${{ env.MEMFAULT_PROJECT_KEY }}\"" >> firmware.conf
          echo MEMFAULT_OVERLAY=overlay-memfault.conf >> $GITHUB_ENV

      - name: Build for NB-IoT only
        working-directory: firmware
        if: contains(matrix.configuration, 'nbiot')
        run: echo "CONFIG_LTE_NETWORK_MODE_NBIOT_GPS=y" >> firmware.conf

      - name: Build with legacy PCO
        working-directory: firmware
        if: contains(matrix.configuration, 'legacy_pco')
        run: echo "CONFIG_PDN_LEGACY_PCO=y" >> firmware.conf

      - name: Build for LTE-m and NB-IoT
        working-directory: firmware
        if: ${{ !contains(matrix.configuration, 'nbiot') }}
        run: echo "CONFIG_LTE_NETWORK_MODE_LTE_M_NBIOT_GPS=y" >> firmware.conf

      - name: enable low-power build
        if: contains(matrix.configuration, 'low-power')
        run: echo CONFIG_OVERLAY=overlay-low-power.conf >> $GITHUB_ENV

      - name: enable debug build
        if: contains(matrix.configuration, 'debug')
        run: |
          echo CONFIG_OVERLAY=overlay-debug.conf >> $GITHUB_ENV
          echo "CONFIG_NRF_MODEM_LIB_TRACE=y" >> firmware.conf

      - name: enable solar shield support
        if: contains(matrix.configuration, 'solar')
        run: |
          echo SHIELD_OVERLAY=overlay-solar.conf >> $GITHUB_ENV
          echo EXTRA_ARGS="-DDTC_OVERLAY_FILE=\"boards/${{ env.board }}.overlay;solar_shield.overlay\"" >> $GITHUB_ENV

      - name: enable WiFi shield support
        if: contains(matrix.configuration, 'wifi')
        run: |
          echo SHIELD_OVERLAY=overlay-nrf7002ek-wifi-scan-only.conf >> $GITHUB_ENV
          echo EXTRA_ARGS="-DSHIELD=nrf7002_ek -DDTC_OVERLAY_FILE=nrf9160dk_with_nrf7002ek.overlay" >> $GITHUB_ENV

      # WiFi cannot be combined with P-GPS support
      - name: enable P-GPS
        if: ${{ !contains(matrix.configuration, 'wifi') }}
        run: echo PGPS_OVERLAY=overlay-pgps.conf >> $GITHUB_ENV

      - name: enable BSEC library to support Bosch BME680 Environmental sensor
        if: contains(matrix.configuration, 'thingy91')
        working-directory: firmware/sdk-nrf/ext
        run: |
          wget -q ${{ secrets.BSEC_ARCHIVE_URL }} -O bsec.zip
          unzip -q bsec.zip
          ls BSEC_1.4.8.0_Generic_Release_updated_v3
          echo BSEC_OVERLAY=/workdir/project/overlay-bsec.conf >> $GITHUB_ENV

      - run: cat firmware.conf
        working-directory: firmware

      - name: Build
        working-directory: firmware
        # -Werror=no-unused-variable below is needed for BSEC to compile
        run: |
          docker run --rm \
            -v ${PWD}:/workdir/project \
            -v ${PWD}/sdk-nrf:/workdir/nrf \
            -w /workdir/nrf/applications/asset_tracker_v2 \
            nordicplayground/nrfconnect-sdk:v2.4-branch \
            west build \
              -p always \
              -b ${{ env.board }} \
              --build-dir /workdir/project/build \
              -- \
                ${{ env.EXTRA_ARGS }} \
                -DOVERLAY_CONFIG="${{ env.CONFIG_OVERLAY }};${{ env.PGPS_OVERLAY }};${{ env.AWS_OVERLAY }};${{ env.MEMFAULT_OVERLAY }};/workdir/project/firmware.conf;${{ env.SHIELD_OVERLAY }};${{ env.BSEC_OVERLAY }}" \
                -DEXTRA_CFLAGS="-Werror -Wno-unused-variable"

      - run: cat firmware/build/zephyr/.config
        if: failure()

      - run: cat firmware/build/zephyr/zephyr.dts
        if: failure()

      - name: Upload symbols file to Memfault
        if: contains(matrix.configuration, 'memfault')
        working-directory: firmware
        run: |
          pip3 install memfault-cli
          memfault \
            --org-token ${{ secrets.MEMFAULT_ORGANIZATION_TOKEN }} \
            --org ${{ secrets.MEMFAULT_ORGANIZATION_SLUG }} \
            --project ${{ secrets.MEMFAULT_PROJECT_SLUG }} \
            upload-mcu-symbols \
            --software-type thingy_world \
            --software-version ${{ env.APP_VERSION }} \
            build/zephyr/zephyr.elf

      - name: Copy firmware
        run: |
          cp firmware/build/zephyr/merged.hex ./
          cp firmware/build/zephyr/app_signed.hex ./
          cp firmware/build/zephyr/app_update.bin ./
          cp firmware/build/zephyr/zephyr.elf ./
          cp firmware/build/zephyr/.config ./

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ matrix.configuration }}-${{
            needs.date-string.outputs.dateAsString }}-${{ github.sha }}
          path: |
            merged.hex
            app_signed.hex
            app_update.bin
            firmware.conf
            zephyr.elf
            .config

  build-mqtt-light-bulb:
    runs-on: ubuntu-22.04

    needs: [release-version, date-string]

    steps:
      - uses: actions/checkout@v3
        with:
          path: firmware
          submodules: recursive

      - name: Configure the AWS IoT broker hostname
        working-directory: firmware
        run: |
          echo "CONFIG_MQTT_SAMPLE_TRANSPORT_BROKER_HOSTNAME=\"${{ env.BROKER_HOSTNAME }}\"" >> firmware.conf
          echo "CONFIG_MQTT_HELPER_SEC_TAG=42" >> firmware.conf

      - run: cat firmware.conf
        working-directory: firmware

      - name: Build
        working-directory: firmware
        run: |
          docker run --rm \
            -v ${PWD}:/workdir/project \
            -v ${PWD}/mqtt-light-bulb:/workdir/nrf \
            -w /workdir/nrf/samples/net/mqtt-lightbulb \
            nordicplayground/nrfconnect-sdk:v2.3-branch \
            west build \
              -p always \
              -b thingy91_nrf9160_ns \
              --build-dir /workdir/project/build \
              -- \
                -DOVERLAY_CONFIG="/workdir/nrf/samples/net/mqtt-lightbulb/overlay-tls-nrf9160.conf;/workdir/project/light-bulb.conf;/workdir/project/firmware.conf" \
                -DEXTRA_CFLAGS="-Werror"

      - run: cat firmware/firmware.conf
        if: failure()

      - run: cat firmware/build/zephyr/.config
        if: failure()

      - run: cat firmware/build/zephyr/zephyr.dts
        if: failure()

      - name: Copy firmware
        run: |
          cp firmware/build/zephyr/merged.hex ./
          cp firmware/build/zephyr/app_signed.hex ./
          cp firmware/build/zephyr/app_update.bin ./
          cp firmware/build/zephyr/zephyr.elf ./
          cp firmware/build/zephyr/.config ./

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: thingy91.mqtt-light-bulb-${{ needs.date-string.outputs.dateAsString }}-${{ github.sha }}
          path: |
            merged.hex
            app_signed.hex
            app_update.bin
            firmware.conf
            zephyr.elf
            .config

  release:
    name: Release
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/saga' && (github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' || github.event_name ==
      'repository_dispatch')

    needs: [build-asset_tracker_v2, build-mqtt-light-bulb]

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3

      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - run: npx semantic-release
