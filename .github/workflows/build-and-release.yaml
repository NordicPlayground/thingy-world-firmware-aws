name: Build and Release

on:
  push:
    paths:
      - "**.c"
      - "**.h"
      - "**.feature"
      - "Kconfig"
      - ".github/workflows/build-and-release.yaml"
      - "west.yml"
      - "*.conf"
      - "!package.json"
      - "!package-lock.json"

jobs:
  # This generates a string containing the current date which is used in
  # in artifact names to simplify locating and distinguishing them once they have
  # been downloaded
  date-string:
    name: Generate string containing the current date
    runs-on: ubuntu-22.04
    outputs:
      dateAsString: ${{ steps.dateAsString.outputs.dateAsString }}
    steps:
      - name: Generate date string
        id: dateAsString
        run: echo "dateAsString=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

  broker:
    name: Determine broker hostname
    runs-on: ubuntu-22.04
    steps:
      - name: Determine the AWS IoT broker hostname
        id: broker-hostname
        run: |
          BROKER_HOSTNAME=`AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }} aws iot describe-endpoint --endpoint-type iot:Data-ATS | jq '.endpointAddress' -r | tr -d '\n'`
          echo ${BROKER_HOSTNAME}
          if [ -z "$BROKER_HOSTNAME" ]; then echo "Failed to discover broker hostname."; exit 1; fi
          echo ${BROKER_HOSTNAME} > broker.conf

      - uses: actions/upload-artifact@v3
        with:
          name: broker
          path: broker.conf

  release-version:
    name: Determine next release version

    runs-on: ubuntu-22.04

    outputs:
      nextRelease: ${{ steps.version.outputs.nextRelease }}

    steps:
      - uses: actions/checkout@v3

      - name: Determine next release version
        uses: nordicsemiconductor/cloud-get-next-version-action@saga
        id: version
        with:
          branch: saga
          defaultVersion: "0.0.0-development-${{ github.sha }}"

      - run: echo ${{ steps.version.outputs.nextRelease }}

  build:
    runs-on: ubuntu-22.04

    needs: [broker, release-version, date-string]

    strategy:
      matrix:
        board: [thingy91_nrf9160_ns, nrf9160dk_nrf9160_ns]

    steps:
      - uses: actions/checkout@v3
        with:
          path: firmware

      - name: Configure Version
        run: |
          APP_VERSION=${{ needs.release-version.outputs.nextRelease }}-${{ matrix.board }}
          echo "CONFIG_ASSET_TRACKER_V2_APP_VERSION=\"${APP_VERSION}\"" >> firmware/firmware.conf
          echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV

      - uses: actions/download-artifact@v3
        with:
          name: broker

      - name: Configure the AWS IoT broker hostname
        run: |
          BROKER_HOSTNAME=`cat broker.conf`
          echo "CONFIG_AWS_IOT_BROKER_HOST_NAME=\"${BROKER_HOSTNAME}\"" >> firmware/firmware.conf

      - name: Configure Memfault
        if: false
        run: |
          echo "CONFIG_NRF_MODEM_LIB_TRACE_ENABLED=y" >> firmware/firmware.conf
          echo "CONFIG_DEBUG_MODULE_MEMFAULT_USE_EXTERNAL_TRANSPORT=y" >> firmware/firmware.conf
          echo "CONFIG_DEBUG_MODULE_MEMFAULT_HEARTBEAT_INTERVAL_SEC=3600" >> firmware/firmware.conf
          echo "CONFIG_MEMFAULT_NCS_FW_VERSION_STATIC=y" >> firmware/firmware.conf
          echo "CONFIG_MEMFAULT_NCS_FW_VERSION=\"${{ env.APP_VERSION }}\"" >> firmware/firmware.conf
          echo "CONFIG_MEMFAULT_NCS_FW_TYPE=\"asset_tracker_v2\"" >> firmware/firmware.conf
          echo "CONFIG_MEMFAULT_NCS_PROJECT_KEY=\"${{ secrets.MEMFAULT_PROJECT_KEY }}\"" >> firmware/firmware.conf

      - run: cat firmware/firmware.conf

      - name: Pull Docker image
        run: docker pull nordicplayground/nrfconnect-sdk:v2.0-branch

      - name: Build
        run: |
          docker run --rm -v ${PWD}:/workdir/project nordicplayground/nrfconnect-sdk:v2.0-branch /bin/bash -c 'cd firmware && west init -l && west update --narrow -o=--depth=1 && west build -p always -b ${{ matrix.board }} -- -DOVERLAY_CONFIG="firmware.conf;overlay-aws.conf" -DEXTRA_CFLAGS="-Werror"'

      - name: Upload symbols file to Memfault
        run: |
          pip3 install memfault-cli
          memfault \
            --org-token ${{ secrets.MEMFAULT_ORGANIZATION_TOKEN }} \
            --org ${{ secrets.MEMFAULT_ORGANIZATION_SLUG }} \
            --project ${{ secrets.MEMFAULT_PROJECT_SLUG }} \
            upload-mcu-symbols \
            --software-type asset_tracker_v2 \
            --software-version ${{ env.APP_VERSION }} \
            firmware/build/zephyr/zephyr.elf

      - name: Copy firmware
        run: |
          cp firmware/build/zephyr/merged.hex ./
          cp firmware/build/zephyr/app_signed.hex ./
          cp firmware/build/zephyr/app_update.bin ./
          cp firmware/build/zephyr/zephyr.elf ./
          cp firmware/firmware.conf ./

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.board }}-${{
            needs.date-string.outputs.dateAsString }}-${{ github.sha }}
          path: |
            merged.hex
            app_signed.hex
            app_update.bin
            firmware.conf
            zephyr.elf

  release:
    name: Release
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/saga' && (github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' || github.event_name ==
      'repository_dispatch')

    needs: [build]

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3

      - run: npx semantic-release
